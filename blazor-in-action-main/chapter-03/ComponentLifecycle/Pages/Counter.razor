@page "/counter"
@page "/counter/{CurrentCount:int}"
<h1>Counter</h1>
<p>Current count: @CurrentCount</p>
<button class="btn btn-primary" @onclick=IncrementCount>Click me</button>
<ul>
    <li><a href="/counter/42">Navigate to /counter/42</a></li>
    <li><a href="/counter/123">Navigate to /counter/123</a></li>
    <li><a href="/counter/">Navigate to /counter</a></li>
</ul>
@code {
    [Parameter]
    public int? CurrentCount { get; set; }
    void IncrementCount()
    {
        CurrentCount++;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine("SetParametersAsync - Begin");
        await base.SetParametersAsync(parameters);
        CurrentCount = CurrentCount ?? 1;
        Console.WriteLine("SetParametersAsync - End");
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized");
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");

        //Console.WriteLine("OnInitializedAsync - Begin");
        //await Task.Delay(300);
        //Console.WriteLine("OnInitializedAsync - End");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet");
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("OnParametersSetAsync");
    }
    protected override bool ShouldRender()
    {
        var isShouldRender= base.ShouldRender();
        Console.WriteLine($"ShouldRender - {isShouldRender}");

        return isShouldRender;
    }

    
    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"OnAfterRender (First render: {firstRender})");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"OnAfterRenderAsync (First render: {firstRender})");
    }

    public void Dispose()
    {
        Console.WriteLine($"Dispose");
    }

    public async ValueTask DisposeAsync()
    {
        Console.WriteLine($"DisposeAsync");
    }
}
